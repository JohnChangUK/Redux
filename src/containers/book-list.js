import React, { Component } from 'react';
import { connect } from 'react-redux';

class BookList extends Component {
  renderList() {
    return this.props.books.map((book) => {
      return (
          <li key={book.title} className="list-group-item">{book.title}</li>
        );
    });
  }

  render() {
    return (
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
      )
  }
}

function mapStateToProps(state) {
  // Whatever is returned will show up as props
  // inside of BookList
  return {
    // books is a reference to this.props.books
    books: state.books
  };
}
// This function is the GLUE between React and Redux

export default connect(mapStateToProps)(BookList);

// Container is more like a route's handler, which also pulls redux's state
//for that route. Then I pass down my state as prop

//Container is a component that has direct access to the state 
// produced by Redux.

// Booklist and BookDetail should be containers, App should be a dumb component, not a smart container/component

// Application State - Generated by Reducers 
// {
//   books: [ {title: "You don't know JS"}, {title: "Design Patterns"}], (Books Reducer)
//   activeBook: {title: "Cracking the Code Interview"}                  (ActiveBook Reducer)
// }




